import './SocialContact.svelte.css';
/* src/components/SocialContact.svelte generated by Svelte v3.42.5 */
import {
	SvelteComponentDev,
	add_location,
	append_dev,
	attr_dev,
	create_component,
	destroy_component,
	detach_dev,
	dispatch_dev,
	element,
	init,
	insert_dev,
	mount_component,
	safe_not_equal,
	set_data_dev,
	space,
	text as text_1,
	transition_in,
	transition_out,
	validate_slots
} from "../../_snowpack/pkg/svelte/internal.js";

import SVG from "../../_snowpack/pkg/svelte-inline-svg.js";
const file = "src/components/SocialContact.svelte";

function create_fragment(ctx) {
	let div;
	let span;
	let svg;
	let t0;
	let a;
	let t1;
	let a_href_value;
	let current;

	svg = new SVG({
			props: {
				style: "fill: " + /*fill*/ ctx[2],
				src: "/img/svg/" + /*name*/ ctx[0] + ".svg"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			span = element("span");
			create_component(svg.$$.fragment);
			t0 = space();
			a = element("a");
			t1 = text_1(/*text*/ ctx[3]);
			attr_dev(span, "class", "icon svelte-x0a7ba");
			add_location(span, file, 10, 2, 149);
			attr_dev(a, "href", a_href_value = /*url*/ ctx[1] || null);
			attr_dev(a, "class", "text svelte-x0a7ba");
			add_location(a, file, 13, 2, 240);
			attr_dev(div, "class", "contact svelte-x0a7ba");
			add_location(div, file, 9, 0, 125);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, span);
			mount_component(svg, span, null);
			append_dev(div, t0);
			append_dev(div, a);
			append_dev(a, t1);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const svg_changes = {};
			if (dirty & /*fill*/ 4) svg_changes.style = "fill: " + /*fill*/ ctx[2];
			if (dirty & /*name*/ 1) svg_changes.src = "/img/svg/" + /*name*/ ctx[0] + ".svg";
			svg.$set(svg_changes);
			if (!current || dirty & /*text*/ 8) set_data_dev(t1, /*text*/ ctx[3]);

			if (!current || dirty & /*url*/ 2 && a_href_value !== (a_href_value = /*url*/ ctx[1] || null)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(svg.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(svg.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('SocialContact', slots, []);
	let { name } = $$props;
	let { url } = $$props;
	let { fill } = $$props;
	let { text } = $$props;
	const writable_props = ['name', 'url', 'fill', 'text'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SocialContact> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('name' in $$props) $$invalidate(0, name = $$props.name);
		if ('url' in $$props) $$invalidate(1, url = $$props.url);
		if ('fill' in $$props) $$invalidate(2, fill = $$props.fill);
		if ('text' in $$props) $$invalidate(3, text = $$props.text);
	};

	$$self.$capture_state = () => ({ SVG, name, url, fill, text });

	$$self.$inject_state = $$props => {
		if ('name' in $$props) $$invalidate(0, name = $$props.name);
		if ('url' in $$props) $$invalidate(1, url = $$props.url);
		if ('fill' in $$props) $$invalidate(2, fill = $$props.fill);
		if ('text' in $$props) $$invalidate(3, text = $$props.text);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [name, url, fill, text];
}

class SocialContact extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { name: 0, url: 1, fill: 2, text: 3 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SocialContact",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*name*/ ctx[0] === undefined && !('name' in props)) {
			console.warn("<SocialContact> was created without expected prop 'name'");
		}

		if (/*url*/ ctx[1] === undefined && !('url' in props)) {
			console.warn("<SocialContact> was created without expected prop 'url'");
		}

		if (/*fill*/ ctx[2] === undefined && !('fill' in props)) {
			console.warn("<SocialContact> was created without expected prop 'fill'");
		}

		if (/*text*/ ctx[3] === undefined && !('text' in props)) {
			console.warn("<SocialContact> was created without expected prop 'text'");
		}
	}

	get name() {
		throw new Error("<SocialContact>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<SocialContact>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get url() {
		throw new Error("<SocialContact>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set url(value) {
		throw new Error("<SocialContact>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get fill() {
		throw new Error("<SocialContact>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set fill(value) {
		throw new Error("<SocialContact>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get text() {
		throw new Error("<SocialContact>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<SocialContact>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default SocialContact;